# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
    # api:
    #     container_name: api
    #     # api service depends on the db service so the db service will be started before the api service
    #     depends_on:
    #         db:
    #             condition: service_healthy
    #     # specify the build context for the api service
    #     build:
    #         context: ./backend
    #         dockerfile: Dockerfile
    #     # specify the ports to expose for the api service
    #     # the first number is the port on the host machine
    #     # the second number is the port inside the container
    #     ports:
    #         - 8000:8000
    #     develop:
    #         # we specify the files to watch for changes
    #         watch:
    #             # it'll watch for changes in the frontend directory and sync the changes with the container real time
    #             - path: ./backend
    #               target: /app
    #               action: rebuild
    db:
        container_name: db
        image: postgres
        restart: always
        secrets:
            - db-password
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD_FILE: /run/secrets/db-password
            POSTGRES_DB: example
            PGDATA: db-data
        ports:
            - 5432:5432
        volumes:
            - db-data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
volumes:
    db-data:
secrets:
    db-password:
        file: db/password.txt
